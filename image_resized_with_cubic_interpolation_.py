# -*- coding: utf-8 -*-
"""Image Resized with Cubic Interpolation .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14svMQLEQBCGlyWXbq5z1LkQfWdCSvxhm
"""

!pip install pytesseract pillow

!apt-get install tesseract-ocr



import os
import cv2
import pytesseract
from PIL import Image

# Set the path to Tesseract OCR executable
pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'

# Paths
image_folder = "/content/invoice/images"
output_folder = "/content/extracted_texts/"  # Folder to save .txt files

# Function to extract text using Tesseract
def extract_text(image_path):
    """
    Convert an image to text using Tesseract OCR.

    Args:
        image_path (str): Path to the image file.

    Returns:
        str: Extracted text from the image.
    """
    try:
        # Open the image file
        img = Image.open(image_path)

        # Perform OCR
        text = pytesseract.image_to_string(img)

        return text
    except Exception as e:
        print(f"Error processing image {image_path}: {e}")
        return ""

# Function to resize the image using OpenCV
def resize_image(image_path):
    """
    Resize the image using OpenCV by a factor of 2.

    Args:
        image_path (str): Path to the image file.

    Returns:
        str: Path to the resized image file.
    """
    try:
        # Load the image using OpenCV
        img = cv2.imread(image_path)

        if img is None:
            print(f"Error: Unable to load image {image_path}")
            return None

        # Resize the image
        resized_img = cv2.resize(img, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)

        # Save the resized image to a temporary file
        resized_image_path = os.path.splitext(image_path)[0] + "_resized.jpg"
        cv2.imwrite(resized_image_path, resized_img)

        return resized_image_path
    except Exception as e:
        print(f"Error resizing image {image_path}: {e}")
        return None

# Function to process the dataset (folder of images)
def process_dataset(image_folder, output_folder, limit=5):
    # Check if the output folder exists, create it if not
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Counter to limit the number of processed images
    processed_count = 0

    # Loop through all files in the folder
    for filename in os.listdir(image_folder):
        if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp', '.tiff')):
            # Construct the full image path
            image_path = os.path.join(image_folder, filename)

            # Extract text from the original image
            print(f"Processing original image: {filename}")
            original_text = extract_text(image_path)
            print("Text from original image:")
            print(original_text)

            # Resize the image
            resized_image_path = resize_image(image_path)

            if resized_image_path:
                # Extract text from the resized image
                print(f"Processing resized image: {os.path.basename(resized_image_path)}")
                resized_text = extract_text(resized_image_path)
                print("Text from resized image:")
                print(resized_text)

                # Create output .txt file path
                txt_filename = os.path.splitext(filename)[0] + "_resized.txt"
                output_txt_path = os.path.join(output_folder, txt_filename)

                # Save extracted text from resized image to .txt file
                try:
                    with open(output_txt_path, 'w') as txt_file:
                        txt_file.write(resized_text)
                    print(f"Processed {filename}, saved text to {txt_filename}")
                except Exception as e:
                    print(f"Error saving text for {filename}: {e}")

            # Increment the counter and stop if limit is reached
            processed_count += 1
            if processed_count >= limit:
                print("Processed limit of images reached.")
                break

# Call the function to process the dataset
process_dataset(image_folder, output_folder, limit=5)